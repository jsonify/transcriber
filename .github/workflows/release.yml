name: Release (Optimized)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  prepare:
    runs-on: macos-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      ci-artifacts-available: ${{ steps.check-ci.outputs.available }}
      ci-run-id: ${{ steps.check-ci.outputs.run-id }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è  Building version: $VERSION"
        
        # Validate version format
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "   Expected format: X.Y.Z (e.g., 2.2.0)"
          exit 1
        fi
        
        echo "‚úÖ Version format validated: $VERSION"
    
    - name: Check for recent CI artifacts
      id: check-ci
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Find the most recent successful CI run for this commit
        COMMIT_SHA="${{ github.sha }}"
        echo "üîç Checking for CI artifacts for commit: $COMMIT_SHA"
        
        # Get recent successful CI runs for main branch
        echo "üìã Searching recent CI runs..."
        CI_RUNS=$(gh run list \
          --workflow=ci.yml \
          --branch=main \
          --status=success \
          --limit=10 \
          --json=conclusion,headSha,databaseId,url,displayTitle,createdAt 2>/dev/null || echo "[]")
        
        if [ "$CI_RUNS" = "[]" ] || [ -z "$CI_RUNS" ]; then
          echo "‚ö†Ô∏è  No recent CI runs found"
          echo "available=false" >> $GITHUB_OUTPUT
          echo "run-id=" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "üìä Recent CI runs:"
        echo "$CI_RUNS" | jq -r '.[] | "  - \(.databaseId): \(.displayTitle) (SHA: \(.headSha[0:7]))"' || true
        
        # Look for exact commit match first
        CI_RUN=$(echo "$CI_RUNS" | jq -r ".[] | select(.headSha == \"$COMMIT_SHA\" and .conclusion == \"success\") | .databaseId" | head -1)
        
        if [ -n "$CI_RUN" ] && [ "$CI_RUN" != "null" ]; then
          echo "‚úÖ Found exact commit match - CI run: $CI_RUN"
          
          # Verify the run has artifacts
          if gh run view $CI_RUN --json artifacts | jq -r '.artifacts[].name' | grep -q "transcriber-release" 2>/dev/null; then
            echo "‚úÖ CI run has transcriber-release artifacts"
            echo "available=true" >> $GITHUB_OUTPUT
            echo "run-id=$CI_RUN" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  CI run found but no transcriber-release artifacts"
            echo "available=false" >> $GITHUB_OUTPUT
            echo "run-id=" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ÑπÔ∏è  No CI artifacts found for exact commit match"
          # Could try recent successful runs as fallback, but for now stick to exact match
          echo "available=false" >> $GITHUB_OUTPUT
          echo "run-id=" >> $GITHUB_OUTPUT
        fi

  build-cli:
    runs-on: macos-latest
    needs: prepare
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate cache key
      id: cache-key
      run: |
        KEY="cli-${{ runner.os }}-${{ github.sha }}-${{ hashFiles('Sources/TranscriberCLI/**', 'Sources/TranscriberCore/**', 'Package.swift') }}"
        echo "key=$KEY" >> $GITHUB_OUTPUT
    
    - name: Cache CLI binary
      id: cache-cli
      uses: actions/cache@v4
      with:
        path: |
          .build/release/transcriber
          transcriber-signed
        key: ${{ steps.cache-key.outputs.key }}
    
    - name: Download CI artifacts (if available)
      if: needs.prepare.outputs.ci-artifacts-available == 'true' && steps.cache-cli.outputs.cache-hit != 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "üîç Attempting to download CI artifacts from run ${{ needs.prepare.outputs.ci-run-id }}"
        if gh run download ${{ needs.prepare.outputs.ci-run-id }} --name transcriber-release --dir ci-artifacts 2>/dev/null; then
          echo "‚úÖ Downloaded CI artifacts successfully"
          echo "üìã Available CI artifacts:"
          ls -la ci-artifacts/ || true
          
          # Look for any zip file with version pattern (more flexible matching)
          RELEASE_VERSION="${{ needs.prepare.outputs.version }}"
          FOUND_ZIP=""
          
          # Try exact version match first
          if [ -f "ci-artifacts/transcriber-${RELEASE_VERSION}.zip" ]; then
            FOUND_ZIP="ci-artifacts/transcriber-${RELEASE_VERSION}.zip"
            echo "‚úÖ Found exact version match: $FOUND_ZIP"
          else
            # Try pattern matching for any transcriber zip
            FOUND_ZIP=$(find ci-artifacts -name "transcriber-*.zip" | head -1)
            if [ -n "$FOUND_ZIP" ]; then
              echo "‚ÑπÔ∏è  Found transcriber archive (version may differ): $FOUND_ZIP"
            fi
          fi
          
          if [ -n "$FOUND_ZIP" ] && [ -f "$FOUND_ZIP" ]; then
            echo "üì¶ Extracting binary from: $FOUND_ZIP"
            cd ci-artifacts
            unzip -q "$FOUND_ZIP"
            
            # Look for transcriber binary in extracted contents
            TRANSCRIBER_BINARY=$(find . -name "transcriber" -type f | head -1)
            if [ -n "$TRANSCRIBER_BINARY" ] && [ -f "$TRANSCRIBER_BINARY" ]; then
              echo "‚úÖ Found CLI binary: $TRANSCRIBER_BINARY"
              mkdir -p ../.build/release
              cp "$TRANSCRIBER_BINARY" ../.build/release/transcriber
              cp "$TRANSCRIBER_BINARY" ../transcriber-signed
              chmod +x ../.build/release/transcriber
              chmod +x ../transcriber-signed
              echo "‚úÖ CLI binary extracted and ready"
            else
              echo "‚ö†Ô∏è  Binary not found in CI artifacts, will build from scratch"
            fi
          else
            echo "‚ö†Ô∏è  No suitable transcriber archive found in CI artifacts" 
          fi
        else
          echo "‚ö†Ô∏è  Failed to download CI artifacts, will build from scratch"
        fi
    
    - name: Cache Swift packages
      if: steps.cache-cli.outputs.cache-hit != 'true'
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-swift-
    
    - name: Build CLI (if not cached/downloaded)
      if: steps.cache-cli.outputs.cache-hit != 'true'
      env:
        RELEASE_VERSION: ${{ needs.prepare.outputs.version }}
      run: |
        echo "üè∑Ô∏è  Building with version: ${{ needs.prepare.outputs.version }}"
        make version-debug
        if [ ! -f ".build/release/transcriber" ]; then
          echo "üî® Building CLI from source..."
          make build-release-cli
          make sign
          cp .build/release/transcriber transcriber-signed
        else
          echo "‚úÖ CLI binary already available"
        fi
    
    - name: Test CLI binary
      run: |
        if [ -f "transcriber-signed" ]; then
          ./transcriber-signed --version
          ./transcriber-signed --help > /dev/null
        else
          echo "‚ùå CLI binary not found"
          exit 1
        fi
    
    - name: Upload CLI artifact
      uses: actions/upload-artifact@v4
      with:
        name: transcriber-cli
        path: |
          transcriber-signed
          transcriber.entitlements
        retention-days: 1

  build-app:
    runs-on: macos-latest
    needs: prepare
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate cache key
      id: cache-key
      run: |
        KEY="app-${{ runner.os }}-${{ github.sha }}-${{ hashFiles('Sources/TranscriberApp/**', 'Sources/TranscriberCore/**', 'Package.swift') }}"
        echo "key=$KEY" >> $GITHUB_OUTPUT
    
    - name: Cache App binary
      id: cache-app
      uses: actions/cache@v4
      with:
        path: |
          .build/release/TranscriberApp
          TranscriberApp-signed
        key: ${{ steps.cache-key.outputs.key }}
    
    - name: Cache Swift packages
      if: steps.cache-app.outputs.cache-hit != 'true'
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-swift-
    
    - name: Build App (if not cached)
      if: steps.cache-app.outputs.cache-hit != 'true'
      env:
        RELEASE_VERSION: ${{ needs.prepare.outputs.version }}
      run: |
        echo "üè∑Ô∏è  Building App with version: ${{ needs.prepare.outputs.version }}"
        make version-debug
        echo "üî® Building App from source..."
        make build-release-app
        make sign-app
        cp .build/release/TranscriberApp TranscriberApp-signed
    
    - name: Test App binary
      run: |
        if [ -f "TranscriberApp-signed" ]; then
          file TranscriberApp-signed
          otool -l TranscriberApp-signed | grep -A5 LC_CODE_SIGNATURE || echo "No code signature found"
        else
          echo "‚ùå App binary not found"
          exit 1
        fi
    
    - name: Upload App artifact
      uses: actions/upload-artifact@v4
      with:
        name: transcriber-app
        path: |
          TranscriberApp-signed
          transcriber.entitlements
        retention-days: 1

  build-cli-intel:
    runs-on: macos-latest
    needs: prepare
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate cache key
      id: cache-key
      run: |
        KEY="cli-intel-${{ runner.os }}-${{ github.sha }}-${{ hashFiles('Sources/TranscriberCLI/**', 'Sources/TranscriberCore/**', 'Package.swift') }}"
        echo "key=$KEY" >> $GITHUB_OUTPUT
    
    - name: Cache Intel CLI binary
      id: cache-cli-intel
      uses: actions/cache@v4
      with:
        path: |
          .build/release/transcriber-intel
          transcriber-intel-signed
        key: ${{ steps.cache-key.outputs.key }}
    
    - name: Cache Swift packages
      if: steps.cache-cli-intel.outputs.cache-hit != 'true'
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-swift-
    
    - name: Build Intel CLI (if not cached)
      if: steps.cache-cli-intel.outputs.cache-hit != 'true'
      env:
        RELEASE_VERSION: ${{ needs.prepare.outputs.version }}
      run: |
        echo "üè∑Ô∏è  Building Intel CLI with version: ${{ needs.prepare.outputs.version }}"
        make version-debug
        echo "üî® Building Intel CLI from source..."
        make build-release-cli-intel
        # Sign with ad-hoc signature
        codesign --force --sign - --entitlements transcriber.entitlements .build/release/transcriber-intel
        cp .build/release/transcriber-intel transcriber-intel-signed
    
    - name: Test Intel CLI binary
      run: |
        if [ -f "transcriber-intel-signed" ]; then
          file transcriber-intel-signed
          echo "‚úÖ Intel CLI binary architecture verified"
          otool -l transcriber-intel-signed | grep -A5 LC_CODE_SIGNATURE || echo "No code signature found"
        else
          echo "‚ùå Intel CLI binary not found"
          exit 1
        fi
    
    - name: Upload Intel CLI artifact
      uses: actions/upload-artifact@v4
      with:
        name: transcriber-cli-intel
        path: |
          transcriber-intel-signed
          transcriber.entitlements
        retention-days: 1

  test-release:
    runs-on: macos-latest
    needs: [prepare, build-cli, build-app, build-cli-intel]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate job dependencies
      run: |
        echo "üîç Validating job dependency outputs..."
        echo "   Version: '${{ needs.prepare.outputs.version }}'"
        echo "   CI artifacts available: '${{ needs.prepare.outputs.ci-artifacts-available }}'"
        echo "   CI run ID: '${{ needs.prepare.outputs.ci-run-id }}'"
        echo "   CLI cache key: '${{ needs.build-cli.outputs.cache-key }}'"
        echo "   App cache key: '${{ needs.build-app.outputs.cache-key }}'"
        
        # Validate required outputs
        if [ -z "${{ needs.prepare.outputs.version }}" ]; then
          echo "‚ùå Missing version from prepare job"
          exit 1
        fi
        
        echo "‚úÖ Job dependencies validated"
    
    - name: Download CLI artifact
      uses: actions/download-artifact@v4
      with:
        name: transcriber-cli
        path: artifacts/cli
    
    - name: Download App artifact
      uses: actions/download-artifact@v4
      with:
        name: transcriber-app
        path: artifacts/app
    
    - name: Download Intel CLI artifact
      uses: actions/download-artifact@v4
      with:
        name: transcriber-cli-intel
        path: artifacts/cli-intel
    
    - name: Test release binaries
      run: |
        echo "üß™ Testing CLI binary..."
        chmod +x artifacts/cli/transcriber-signed
        artifacts/cli/transcriber-signed --version
        artifacts/cli/transcriber-signed --help > /dev/null
        
        echo "üß™ Testing Intel CLI binary..."
        chmod +x artifacts/cli-intel/transcriber-intel-signed
        file artifacts/cli-intel/transcriber-intel-signed
        artifacts/cli-intel/transcriber-intel-signed --version
        artifacts/cli-intel/transcriber-intel-signed --help > /dev/null
        
        echo "üß™ Testing App binary..."
        chmod +x artifacts/app/TranscriberApp-signed
        file artifacts/app/TranscriberApp-signed
        
        echo "‚úÖ All release binaries tested successfully"

  create-assets:
    runs-on: macos-latest
    needs: [prepare, build-cli, build-app, build-cli-intel, test-release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate release prerequisites
      run: |
        echo "üîç Validating release prerequisites..."
        echo "   Release version: '${{ needs.prepare.outputs.version }}'"
        
        # Validate version consistency
        if [ -z "${{ needs.prepare.outputs.version }}" ]; then
          echo "‚ùå Missing version from prepare job"
          exit 1
        fi
        
        # Validate tag consistency
        EXPECTED_TAG="v${{ needs.prepare.outputs.version }}"
        ACTUAL_TAG="${GITHUB_REF#refs/tags/}"
        if [ "$EXPECTED_TAG" != "$ACTUAL_TAG" ]; then
          echo "‚ùå Version mismatch:"
          echo "   Expected: $EXPECTED_TAG"
          echo "   Actual: $ACTUAL_TAG"
          exit 1
        fi
        
        echo "‚úÖ Release prerequisites validated"
        echo "   Building release for version: ${{ needs.prepare.outputs.version }}"
    
    - name: Download CLI artifact
      uses: actions/download-artifact@v4
      with:
        name: transcriber-cli
        path: artifacts/cli
    
    - name: Download App artifact
      uses: actions/download-artifact@v4
      with:
        name: transcriber-app
        path: artifacts/app
    
    - name: Download Intel CLI artifact
      uses: actions/download-artifact@v4
      with:
        name: transcriber-cli-intel
        path: artifacts/cli-intel
    
    - name: Setup release directory
      run: |
        mkdir -p releases
        mkdir -p .build/release
        
        # Move binaries to expected locations
        cp artifacts/cli/transcriber-signed .build/release/transcriber
        cp artifacts/app/TranscriberApp-signed .build/release/TranscriberApp
        
        chmod +x .build/release/transcriber
        chmod +x .build/release/TranscriberApp
    
    - name: Create ZIP archive
      run: |
        echo "üì¶ Creating ZIP archive..."
        VERSION="${{ needs.prepare.outputs.version }}"
        ARCHIVE_DIR="releases/transcriber-$VERSION"
        
        mkdir -p "$ARCHIVE_DIR"
        cp .build/release/transcriber "$ARCHIVE_DIR/"
        cp transcriber.entitlements "$ARCHIVE_DIR/"
        cp README.md "$ARCHIVE_DIR/"
        
        # Create install script
        cat > "$ARCHIVE_DIR/install.sh" << 'EOF'
        #!/bin/bash
        set -e
        echo "Installing Transcriber..."
        sudo cp transcriber /usr/local/bin/
        echo "‚úÖ Transcriber installed to /usr/local/bin/"
        echo "Run 'transcriber --help' to get started"
        EOF
        chmod +x "$ARCHIVE_DIR/install.sh"
        
        cd releases
        zip -r "transcriber-$VERSION.zip" "transcriber-$VERSION"
        echo "‚úÖ ZIP archive created"
    
    - name: Create Intel-only ZIP archive
      run: |
        echo "üì¶ Creating Intel-only ZIP archive..."
        VERSION="${{ needs.prepare.outputs.version }}"
        ARCHIVE_DIR="releases/transcriber-$VERSION-intel"
        
        mkdir -p "$ARCHIVE_DIR"
        cp artifacts/cli-intel/transcriber-intel-signed "$ARCHIVE_DIR/transcriber"
        cp transcriber.entitlements "$ARCHIVE_DIR/"
        cp README.md "$ARCHIVE_DIR/"
        
        # Create install script
        cat > "$ARCHIVE_DIR/install.sh" << 'EOF'
        #!/bin/bash
        set -e
        echo "Installing Transcriber (Intel-only)..."
        sudo cp transcriber /usr/local/bin/
        echo "‚úÖ Transcriber (Intel-only) installed to /usr/local/bin/"
        echo "Run 'transcriber --help' to get started"
        EOF
        chmod +x "$ARCHIVE_DIR/install.sh"
        
        # Add Intel-specific readme
        cat > "$ARCHIVE_DIR/README-INTEL.md" << 'EOF'
        # Transcriber Intel-Only Build
        
        This is an Intel x86_64-only build of Transcriber CLI for older Mac systems.
        
        ## Installation
        
        1. Run the install script: `./install.sh`
        2. Or manually copy: `sudo cp transcriber /usr/local/bin/`
        
        ## Gatekeeper Bypass
        
        Since this uses ad-hoc signing, you may need to bypass Gatekeeper:
        
        ```bash
        # One-time bypass
        xattr -d com.apple.quarantine transcriber
        ```
        
        Or right-click ‚Üí Open when first running.
        EOF
        
        cd releases
        zip -r "transcriber-$VERSION-intel.zip" "transcriber-$VERSION-intel"
        echo "‚úÖ Intel-only ZIP archive created"
    
    - name: Create DMG installer
      env:
        RELEASE_VERSION: ${{ needs.prepare.outputs.version }}
      run: |
        echo "üíø Creating DMG installer with version ${{ needs.prepare.outputs.version }}..."
        make version-debug
        
        # Verify binaries are in place before DMG creation
        echo "üîç Verifying binaries before DMG creation..."
        if [ ! -f ".build/release/transcriber" ]; then
          echo "‚ùå CLI binary not found at .build/release/transcriber"
          echo "üìÅ Contents of .build/release/:"
          ls -la .build/release/ || echo "   (.build/release directory not found)"
          exit 1
        fi
        
        if [ ! -f ".build/release/TranscriberApp" ]; then
          echo "‚ùå App binary not found at .build/release/TranscriberApp" 
          echo "üìÅ Contents of .build/release/:"
          ls -la .build/release/ || echo "   (.build/release directory not found)"
          exit 1
        fi
        
        echo "‚úÖ Both binaries found, creating DMG..."
        
        # Create DMG directly via script (avoids make dependencies that rebuild)
        if ! ./installer/build-scripts/create-dmg.sh; then
          echo "‚ùå DMG creation failed"
          echo "üìÅ Current releases directory:"
          ls -la releases/ || echo "   (releases directory not found)"
          echo "üîß Attempting to diagnose issue..."
          make clean
          exit 1
        fi
        
        # Verify DMG was created
        EXPECTED_DMG="releases/Transcriber-${{ needs.prepare.outputs.version }}.dmg"
        if [ ! -f "$EXPECTED_DMG" ]; then
          echo "‚ùå DMG file not found at expected location: $EXPECTED_DMG"
          echo "üìÅ Available files:"
          ls -la releases/ || echo "   (releases directory not found)"
          exit 1
        fi
        
        echo "‚úÖ DMG installer created successfully: $EXPECTED_DMG"
    
    - name: Validate release artifacts
      run: |
        echo "üîç Validating release artifacts..."
        VERSION="${{ needs.prepare.outputs.version }}"
        
        # Check for expected files
        EXPECTED_ZIP="releases/transcriber-$VERSION.zip"
        EXPECTED_INTEL_ZIP="releases/transcriber-$VERSION-intel.zip"
        EXPECTED_DMG="releases/Transcriber-$VERSION.dmg"
        
        echo "üìã Expected artifacts:"
        echo "   ZIP: $EXPECTED_ZIP"
        echo "   Intel ZIP: $EXPECTED_INTEL_ZIP"
        echo "   DMG: $EXPECTED_DMG"
        
        # Validate ZIP file
        if [ ! -f "$EXPECTED_ZIP" ]; then
          echo "‚ùå Missing ZIP artifact: $EXPECTED_ZIP"
          echo "üìÅ Available files in releases/:"
          ls -la releases/ || echo "   (releases directory not found)"
          exit 1
        else
          echo "‚úÖ ZIP artifact found: $EXPECTED_ZIP ($(du -sh "$EXPECTED_ZIP" | cut -f1))"
        fi
        
        # Validate Intel ZIP file
        if [ ! -f "$EXPECTED_INTEL_ZIP" ]; then
          echo "‚ùå Missing Intel ZIP artifact: $EXPECTED_INTEL_ZIP"
          echo "üìÅ Available files in releases/:"
          ls -la releases/ || echo "   (releases directory not found)"
          exit 1
        else
          echo "‚úÖ Intel ZIP artifact found: $EXPECTED_INTEL_ZIP ($(du -sh "$EXPECTED_INTEL_ZIP" | cut -f1))"
        fi
        
        # Validate DMG file
        if [ ! -f "$EXPECTED_DMG" ]; then
          echo "‚ùå Missing DMG artifact: $EXPECTED_DMG"
          echo "üìÅ Available files in releases/:"
          ls -la releases/ || echo "   (releases directory not found)"
          exit 1
        else
          echo "‚úÖ DMG artifact found: $EXPECTED_DMG ($(du -sh "$EXPECTED_DMG" | cut -f1))"
        fi
        
        # Additional validation: check file sizes are reasonable
        ZIP_SIZE=$(stat -f%z "$EXPECTED_ZIP" 2>/dev/null || echo "0")
        INTEL_ZIP_SIZE=$(stat -f%z "$EXPECTED_INTEL_ZIP" 2>/dev/null || echo "0")
        DMG_SIZE=$(stat -f%z "$EXPECTED_DMG" 2>/dev/null || echo "0")
        
        if [ "$ZIP_SIZE" -lt 100000 ]; then  # Less than 100KB
          echo "‚ö†Ô∏è  ZIP file seems too small: ${ZIP_SIZE} bytes"
        fi
        
        if [ "$INTEL_ZIP_SIZE" -lt 100000 ]; then  # Less than 100KB
          echo "‚ö†Ô∏è  Intel ZIP file seems too small: ${INTEL_ZIP_SIZE} bytes"
        fi
        
        if [ "$DMG_SIZE" -lt 500000 ]; then  # Less than 500KB
          echo "‚ö†Ô∏è  DMG file seems too small: ${DMG_SIZE} bytes"
        fi
        
        echo "üìä Artifact Summary:"
        echo "   ZIP: $EXPECTED_ZIP - ${ZIP_SIZE} bytes"
        echo "   Intel ZIP: $EXPECTED_INTEL_ZIP - ${INTEL_ZIP_SIZE} bytes"
        echo "   DMG: $EXPECTED_DMG - ${DMG_SIZE} bytes"
        echo "‚úÖ All expected release artifacts validated successfully"
    
    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: |
          releases/*.zip
          releases/*.dmg
        retention-days: 1
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          releases/*.zip
          releases/*.dmg
        name: Release v${{ needs.prepare.outputs.version }}
        body: |
          ## Transcriber v${{ needs.prepare.outputs.version }}
          
          ### üì¶ Download & Installation
          
          **üöÄ Recommended: DMG Installer (Best User Experience)**
          1. Download `Transcriber-${{ needs.prepare.outputs.version }}.dmg`
          2. Double-click to mount the DMG
          3. Drag Transcriber.app to Applications folder
          4. Double-click "Install CLI Tool.command" for terminal access
          5. Complete installation with beautiful drag-and-drop interface
          
          **‚ö° Developer/CLI Only (ZIP):**
          1. Download `transcriber-${{ needs.prepare.outputs.version }}.zip`
          2. Extract the zip file
          3. Run `./install.sh` to install CLI tool system-wide
          
          **üíª Intel Mac Only (ZIP):**
          1. Download `transcriber-${{ needs.prepare.outputs.version }}-intel.zip`
          2. Extract the zip file
          3. Run `./install.sh` to install CLI tool system-wide
          4. For Gatekeeper: Right-click ‚Üí Open when first running
          
          **üîß Manual Install:**
          ```bash
          sudo cp transcriber /usr/local/bin/
          ```
          
          ### üìã What's Included
          
          **üíø DMG Installer (.dmg) - Complete Solution:**
          - `Transcriber.app` - Native macOS application with beautiful interface
          - `Install CLI Tool.command` - Easy CLI installation script  
          - `README.txt` - Complete installation and usage instructions
          - `Applications` shortcut - For intuitive drag-and-drop experience
          - No Gatekeeper warnings with drag-and-drop installation
          - Both GUI app and CLI tool in one package
          
          **üìÅ ZIP Archive (.zip) - CLI Tool Only:**
          - `transcriber` - The main CLI binary (signed with Speech Recognition entitlements)
          - `transcriber.entitlements` - Required entitlements file
          - `install.sh` - Automated installation script
          - `README.md` - Documentation and usage guide
          
          **üíª Intel ZIP Archive (-intel.zip) - Intel Mac Only:**
          - `transcriber` - Intel x86_64-only CLI binary (ad-hoc signed)
          - `transcriber.entitlements` - Required entitlements file
          - `install.sh` - Automated installation script
          - `README.md` - General documentation
          - `README-INTEL.md` - Intel-specific installation notes
          
          ### ‚ú® Usage
          
          ```bash
          transcriber --help
          transcriber audio.mp3
          transcriber --list-languages
          ```
          
          ### üÜï New DMG Installer Features
          
          - **Beautiful Interface** - Custom background with organized layout
          - **Drag-and-Drop Installation** - Familiar macOS installation experience
          - **Integrated CLI Installer** - One-click CLI tool installation
          - **No Gatekeeper Warnings** - Better compatibility than traditional installers
          - **Complete Documentation** - Built-in README with usage instructions
          - **Self-Contained** - Everything needed in one elegant package
          
          **Requirements:** macOS 13.0+ with Speech Recognition framework
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}